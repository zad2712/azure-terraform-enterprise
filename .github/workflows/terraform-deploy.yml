#===============================================================================
# Terraform Multi-Layer Deployment Pipeline
# 
# This workflow deploys the enterprise Azure infrastructure across multiple layers
# and environments following the dependency chain:
# networking -> security -> storage -> database -> compute -> monitoring
#===============================================================================

name: 🚀 Terraform Deploy

on:
  # Manual workflow dispatch with environment and layer selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod
        default: dev
      
      layer:
        description: 'Infrastructure layer to deploy'
        required: true
        type: choice
        options:
          - networking
          - security
          - storage
          - database
          - compute
          - monitoring
          - all
        default: networking
      
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan
      
      auto_approve:
        description: 'Auto-approve apply (use with caution)'
        required: false
        type: boolean
        default: false
  
  # Automatic deployment on push to main (dev environment only)
  push:
    branches: [main]
    paths:
      - 'layers/**'
      - 'modules/**'
      - '.github/workflows/terraform-deploy.yml'
  
  # Plan on pull requests
  pull_request:
    branches: [main]
    paths:
      - 'layers/**'
      - 'modules/**'
      - '.github/workflows/terraform-deploy.yml'

# Global environment variables
env:
  TF_VERSION: '1.6.0'
  TF_LOG: INFO
  ARM_USE_MSI: false
  ARM_USE_CLI: false

jobs:
  #=============================================================================
  # Setup and Validation Job
  #=============================================================================
  setup:
    name: 🔍 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      layers: ${{ steps.setup.outputs.layers }}
      changed_layers: ${{ steps.detect-changes.outputs.changed_layers }}
      deployment_matrix: ${{ steps.setup.outputs.deployment_matrix }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Environment Variables
        id: setup
        run: |
          # Determine environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
            LAYER="${{ github.event.inputs.layer }}"
            ACTION="${{ github.event.inputs.action }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            ENV="dev"
            LAYER="all"
            ACTION="plan"
          else # pull_request
            ENV="dev"
            LAYER="all"
            ACTION="plan"
          fi
          
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "action=${ACTION}" >> $GITHUB_OUTPUT
          
          # Define layer deployment order
          if [[ "${LAYER}" == "all" ]]; then
            LAYERS='["networking", "security", "storage", "database", "compute", "monitoring"]'
          else
            LAYERS='["'${LAYER}'"]'
          fi
          
          echo "layers=${LAYERS}" >> $GITHUB_OUTPUT
          
          # Create deployment matrix
          MATRIX=$(echo ${LAYERS} | jq -c "{layer: ., environment: [\"${ENV}\"]}")
          echo "deployment_matrix=${MATRIX}" >> $GITHUB_OUTPUT
          
          echo "🎯 Target Environment: ${ENV}"
          echo "🏗️ Layers to deploy: ${LAYERS}"
          echo "⚡ Action: ${ACTION}"
      
      - name: 🔍 Detect Changed Layers
        id: detect-changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Get changed files between base and head
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Get changed files in the last commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            # Manual dispatch - consider all layers changed
            CHANGED_FILES="layers/"
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Determine which layers are affected
          CHANGED_LAYERS=()
          for layer in networking security storage database compute monitoring; do
            if echo "$CHANGED_FILES" | grep -q "layers/${layer}/\|modules/"; then
              CHANGED_LAYERS+=("\"${layer}\"")
            fi
          done
          
          # If modules changed, consider all layers affected
          if echo "$CHANGED_FILES" | grep -q "modules/"; then
            CHANGED_LAYERS=("\"networking\"" "\"security\"" "\"storage\"" "\"database\"" "\"compute\"" "\"monitoring\"")
          fi
          
          CHANGED_LAYERS_JSON=$(IFS=,; echo "[${CHANGED_LAYERS[*]}]")
          echo "changed_layers=${CHANGED_LAYERS_JSON}" >> $GITHUB_OUTPUT
          echo "🔍 Changed layers: ${CHANGED_LAYERS_JSON}"

  #=============================================================================
  # Terraform Plan Job (runs for all events)
  #=============================================================================
  terraform-plan:
    name: 📋 Plan (${{ matrix.layer }}-${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: setup
    if: always() && !cancelled() && !failure()
    
    strategy:
      matrix: 
        layer: ${{ fromJson(needs.setup.outputs.layers) }}
        environment: [dev] # Will be overridden by setup output
      max-parallel: 1 # Deploy layers sequentially
      fail-fast: false
    
    env:
      TF_WORKSPACE: ${{ matrix.layer }}-${{ needs.setup.outputs.environment }}
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 🏗️ Terraform Init
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "🔄 Initializing Terraform for ${{ matrix.layer }}/${{ needs.setup.outputs.environment }}..."
          
          # Check if backend config exists
          if [[ ! -f "environments/${{ needs.setup.outputs.environment }}/backend.conf" ]]; then
            echo "❌ Backend configuration not found: environments/${{ needs.setup.outputs.environment }}/backend.conf"
            exit 1
          fi
          
          # Replace placeholder in backend.conf if needed
          if grep -q "<STORAGE_ACCOUNT_NAME>" environments/${{ needs.setup.outputs.environment }}/backend.conf; then
            echo "⚠️ Backend configuration contains placeholder. Please update backend.conf with actual storage account name."
            exit 1
          fi
          
          terraform init -backend-config=environments/${{ needs.setup.outputs.environment }}/backend.conf
      
      - name: 🔍 Terraform Validate
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "✅ Validating Terraform configuration..."
          terraform validate
      
      - name: 📋 Terraform Plan
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "📋 Creating Terraform plan for ${{ matrix.layer }}/${{ needs.setup.outputs.environment }}..."
          
          # Check if tfvars file exists
          if [[ ! -f "environments/${{ needs.setup.outputs.environment }}/terraform.tfvars" ]]; then
            echo "❌ Variables file not found: environments/${{ needs.setup.outputs.environment }}/terraform.tfvars"
            exit 1
          fi
          
          terraform plan \
            -var-file=environments/${{ needs.setup.outputs.environment }}/terraform.tfvars \
            -out=tfplan-${{ needs.setup.outputs.environment }} \
            -detailed-exitcode
        continue-on-error: true
        id: plan
      
      - name: 📊 Plan Summary
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "## 📋 Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Layer:** ${{ matrix.layer }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.plan.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f tfplan-${{ needs.setup.outputs.environment }} ]]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            terraform show -no-color tfplan-${{ needs.setup.outputs.environment }} | head -50 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 💾 Upload Plan Artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: tfplan-${{ matrix.layer }}-${{ needs.setup.outputs.environment }}
          path: layers/${{ matrix.layer }}/tfplan-${{ needs.setup.outputs.environment }}
          retention-days: 30

  #=============================================================================
  # Terraform Apply Job (only on workflow_dispatch with apply action)
  #=============================================================================
  terraform-apply:
    name: 🚀 Apply (${{ matrix.layer }}-${{ needs.setup.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan]
    if: |
      always() && 
      !cancelled() && 
      !failure() && 
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'apply'
    
    strategy:
      matrix: 
        layer: ${{ fromJson(needs.setup.outputs.layers) }}
      max-parallel: 1 # Deploy layers sequentially
      fail-fast: true
    
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: https://portal.azure.com
    
    env:
      TF_WORKSPACE: ${{ matrix.layer }}-${{ needs.setup.outputs.environment }}
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 💾 Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan-${{ matrix.layer }}-${{ needs.setup.outputs.environment }}
          path: layers/${{ matrix.layer }}/
      
      - name: 🏗️ Terraform Init
        working-directory: layers/${{ matrix.layer }}
        run: |
          terraform init -backend-config=environments/${{ needs.setup.outputs.environment }}/backend.conf
      
      - name: ⚠️ Production Protection
        if: needs.setup.outputs.environment == 'prod'
        run: |
          echo "🛡️ PRODUCTION DEPLOYMENT DETECTED"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Layer: ${{ matrix.layer }}"
          echo ""
          echo "⚠️ This will deploy to production environment!"
          echo "Please ensure you have:"
          echo "1. ✅ Reviewed the Terraform plan thoroughly"
          echo "2. ✅ Obtained necessary approvals"
          echo "3. ✅ Verified backup procedures"
          echo "4. ✅ Confirmed maintenance window"
          echo ""
          
          # Add a delay for production deployments
          echo "Waiting 30 seconds before proceeding..."
          sleep 30
      
      - name: 🚀 Terraform Apply
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "🚀 Applying Terraform plan for ${{ matrix.layer }}/${{ needs.setup.outputs.environment }}..."
          
          if [[ "${{ github.event.inputs.auto_approve }}" == "true" ]]; then
            echo "⚡ Auto-approve enabled"
            terraform apply -auto-approve tfplan-${{ needs.setup.outputs.environment }}
          else
            terraform apply tfplan-${{ needs.setup.outputs.environment }}
          fi
      
      - name: 📋 Output Values
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "## 📋 Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          terraform output -json >> $GITHUB_STEP_SUMMARY || echo "{}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  #=============================================================================
  # Terraform Destroy Job (only on workflow_dispatch with destroy action)
  #=============================================================================
  terraform-destroy:
    name: 💥 Destroy (${{ matrix.layer }}-${{ needs.setup.outputs.environment }})
    runs-on: ubuntu-latest
    needs: setup
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'destroy'
    
    strategy:
      matrix: 
        layer: ${{ fromJson(needs.setup.outputs.layers) }}
      max-parallel: 1
      fail-fast: false
    
    environment: 
      name: ${{ needs.setup.outputs.environment }}-destroy
      url: https://portal.azure.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 🏗️ Terraform Init
        working-directory: layers/${{ matrix.layer }}
        run: |
          terraform init -backend-config=environments/${{ needs.setup.outputs.environment }}/backend.conf
      
      - name: ⚠️ Destruction Warning
        run: |
          echo "💥 INFRASTRUCTURE DESTRUCTION"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Layer: ${{ matrix.layer }}"
          echo ""
          echo "⚠️ THIS WILL PERMANENTLY DELETE RESOURCES!"
          echo "Proceeding in 60 seconds..."
          sleep 60
      
      - name: 💥 Terraform Destroy
        working-directory: layers/${{ matrix.layer }}
        run: |
          terraform destroy \
            -var-file=environments/${{ needs.setup.outputs.environment }}/terraform.tfvars \
            -auto-approve

  #=============================================================================
  # Notification Job
  #=============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan, terraform-apply, terraform-destroy]
    if: always()
    
    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Layers:** ${{ needs.setup.outputs.layers }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Setup: ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Plan: ${{ needs.terraform-plan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Apply: ${{ needs.terraform-apply.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Destroy: ${{ needs.terraform-destroy.result }}" >> $GITHUB_STEP_SUMMARY