name: 🚀 Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options: [dev, qa, uat, prod]
        default: dev
      
      layer:
        description: 'Infrastructure layer to deploy'
        required: true
        type: choice
        options: [networking, security, storage, database, compute, monitoring, all]
        default: networking
      
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options: [plan, apply, destroy]
        default: plan
      
      auto_approve:
        description: 'Auto-approve apply (use with caution)'
        required: false
        type: boolean
        default: false
  
  push:
    branches: [main]
    paths: ['layers/**', 'modules/**', '.github/workflows/terraform-deploy.yml']
  
  pull_request:
    branches: [main]
    paths: ['layers/**', 'modules/**', '.github/workflows/terraform-deploy.yml']

env:
  TF_VERSION: '1.6.0'

jobs:
  #=============================================================================
  # Change Detection
  #=============================================================================
  detect-changes:
    name: 🔍 Detect Changes
    uses: ./.github/workflows/reusable-change-detection.yml
    with:
      base_ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}
      head_ref: ${{ github.sha }}

  #=============================================================================
  # Setup Deployment Matrix
  #=============================================================================
  setup-matrix:
    name: 🔧 Setup Matrix
    uses: ./.github/workflows/reusable-matrix-setup.yml
    needs: detect-changes
    with:
      environments: ${{ github.event_name == 'workflow_dispatch' && format('["{0}"]', github.event.inputs.environment) || '["dev"]' }}
      layers: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.layer == 'all' && '"all"' || format('["{0}"]', github.event.inputs.layer)) || needs.detect-changes.outputs.changed_layers }}
      filter_existing_configs: true

  #=============================================================================
  # Terraform Plan Job
  #=============================================================================
  terraform-plan:
    name: 📋 Plan
    needs: [detect-changes, setup-matrix]
    if: always() && !cancelled() && !failure() && needs.setup-matrix.outputs.combinations_count != '0'
    
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      max-parallel: 1
      fail-fast: false
    
    uses: ./.github/workflows/reusable-terraform-operation.yml
    with:
      layer: ${{ matrix.layer }}
      environment: ${{ matrix.environment }}
      operation: plan
      terraform_version: ${{ env.TF_VERSION }}
      plan_artifact_name: pr${{ github.event.number || 'main' }}
    secrets:
      azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  #=============================================================================
  # Terraform Apply Job (only on workflow_dispatch with apply action)
  #=============================================================================
  terraform-apply:
    name: 🚀 Apply (${{ matrix.layer }}-${{ needs.setup.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan]
    if: |
      always() && 
      !cancelled() && 
      !failure() && 
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'apply'
    
    strategy:
      matrix: 
        layer: ${{ fromJson(needs.setup.outputs.layers) }}
      max-parallel: 1 # Deploy layers sequentially
      fail-fast: true
    
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: https://portal.azure.com
    
    env:
      TF_WORKSPACE: ${{ matrix.layer }}-${{ needs.setup.outputs.environment }}
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 💾 Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan-${{ matrix.layer }}-${{ needs.setup.outputs.environment }}
          path: layers/${{ matrix.layer }}/
      
      - name: 🏗️ Terraform Init
        working-directory: layers/${{ matrix.layer }}
        run: |
          terraform init -backend-config=environments/${{ needs.setup.outputs.environment }}/backend.conf
      
      - name: ⚠️ Production Protection
        if: needs.setup.outputs.environment == 'prod'
        run: |
          echo "🛡️ PRODUCTION DEPLOYMENT DETECTED"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Layer: ${{ matrix.layer }}"
          echo ""
          echo "⚠️ This will deploy to production environment!"
          echo "Please ensure you have:"
          echo "1. ✅ Reviewed the Terraform plan thoroughly"
          echo "2. ✅ Obtained necessary approvals"
          echo "3. ✅ Verified backup procedures"
          echo "4. ✅ Confirmed maintenance window"
          echo ""
          
          # Add a delay for production deployments
          echo "Waiting 30 seconds before proceeding..."
          sleep 30
      
      - name: 🚀 Terraform Apply
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "🚀 Applying Terraform plan for ${{ matrix.layer }}/${{ needs.setup.outputs.environment }}..."
          
          if [[ "${{ github.event.inputs.auto_approve }}" == "true" ]]; then
            echo "⚡ Auto-approve enabled"
            terraform apply -auto-approve tfplan-${{ needs.setup.outputs.environment }}
          else
            terraform apply tfplan-${{ needs.setup.outputs.environment }}
          fi
      
      - name: 📋 Output Values
        working-directory: layers/${{ matrix.layer }}
        run: |
          echo "## 📋 Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          terraform output -json >> $GITHUB_STEP_SUMMARY || echo "{}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  #=============================================================================
  # Terraform Destroy Job (only on workflow_dispatch with destroy action)
  #=============================================================================
  terraform-destroy:
    name: 💥 Destroy (${{ matrix.layer }}-${{ needs.setup.outputs.environment }})
    runs-on: ubuntu-latest
    needs: setup
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'destroy'
    
    strategy:
      matrix: 
        layer: ${{ fromJson(needs.setup.outputs.layers) }}
      max-parallel: 1
      fail-fast: false
    
    environment: 
      name: ${{ needs.setup.outputs.environment }}-destroy
      url: https://portal.azure.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 🏗️ Terraform Init
        working-directory: layers/${{ matrix.layer }}
        run: |
          terraform init -backend-config=environments/${{ needs.setup.outputs.environment }}/backend.conf
      
      - name: ⚠️ Destruction Warning
        run: |
          echo "💥 INFRASTRUCTURE DESTRUCTION"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Layer: ${{ matrix.layer }}"
          echo ""
          echo "⚠️ THIS WILL PERMANENTLY DELETE RESOURCES!"
          echo "Proceeding in 60 seconds..."
          sleep 60
      
      - name: 💥 Terraform Destroy
        working-directory: layers/${{ matrix.layer }}
        run: |
          terraform destroy \
            -var-file=environments/${{ needs.setup.outputs.environment }}/terraform.tfvars \
            -auto-approve

  #=============================================================================
  # Notification Job
  #=============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [setup, terraform-plan, terraform-apply, terraform-destroy]
    if: always()
    
    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Layers:** ${{ needs.setup.outputs.layers }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Setup: ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Plan: ${{ needs.terraform-plan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Apply: ${{ needs.terraform-apply.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Destroy: ${{ needs.terraform-destroy.result }}" >> $GITHUB_STEP_SUMMARY