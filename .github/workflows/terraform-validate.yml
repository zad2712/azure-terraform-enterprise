#===============================================================================
# Terraform Code Quality and Security Validation
# 
# This workflow runs comprehensive validation, security scanning, and code quality
# checks on all Terraform code in the repository.
#===============================================================================

name: 🔍 Code Quality & Security

on:
  # Run on all pull requests
  pull_request:
    branches: [main, develop]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
      - '.github/workflows/terraform-validate.yml'
  
  # Run on pushes to main
  push:
    branches: [main]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
  
  # Allow manual trigger
  workflow_dispatch:

# Global environment variables
env:
  TF_VERSION: '1.6.0'
  TFLINT_VERSION: '0.48.0'
  CHECKOV_VERSION: '3.0.0'

jobs:
  #=============================================================================
  # Terraform Formatting and Validation
  #=============================================================================
  terraform-validate:
    name: 🔧 Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: 🎨 Terraform Format Check
        run: |
          echo "🎨 Checking Terraform formatting..."
          terraform fmt -check -recursive -diff
          
          if [[ $? -ne 0 ]]; then
            echo ""
            echo "❌ Terraform files are not properly formatted!"
            echo "Run 'terraform fmt -recursive' to fix formatting issues."
            echo ""
            echo "## 🎨 Formatting Issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following files need formatting:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            terraform fmt -check -recursive -diff >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ All Terraform files are properly formatted!"
      
      - name: 🔍 Terraform Validation (All Layers)
        run: |
          echo "🔍 Validating all Terraform configurations..."
          
          # Track validation results
          FAILED_LAYERS=()
          SUCCESS_COUNT=0
          
          # Validate each layer
          for layer in layers/*/; do
            layer_name=$(basename "$layer")
            echo ""
            echo "🔍 Validating layer: $layer_name"
            
            cd "$layer"
            
            # Initialize without backend (validation only)
            if terraform init -backend=false > /dev/null 2>&1; then
              if terraform validate; then
                echo "✅ $layer_name: Valid"
                ((SUCCESS_COUNT++))
              else
                echo "❌ $layer_name: Invalid"
                FAILED_LAYERS+=("$layer_name")
              fi
            else
              echo "❌ $layer_name: Init failed"
              FAILED_LAYERS+=("$layer_name")
            fi
            
            cd - > /dev/null
          done
          
          # Create summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Terraform Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**✅ Successful:** $SUCCESS_COUNT layers" >> $GITHUB_STEP_SUMMARY
          
          if [[ ${#FAILED_LAYERS[@]} -gt 0 ]]; then
            echo "**❌ Failed:** ${#FAILED_LAYERS[@]} layers" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Failed layers:" >> $GITHUB_STEP_SUMMARY
            for failed_layer in "${FAILED_LAYERS[@]}"; do
              echo "- $failed_layer" >> $GITHUB_STEP_SUMMARY
            done
            exit 1
          else
            echo "**❌ Failed:** 0 layers" >> $GITHUB_STEP_SUMMARY
          fi

  #=============================================================================
  # TFLint Static Analysis
  #=============================================================================
  tflint:
    name: 🔎 TFLint Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}
      
      - name: 📋 TFLint Configuration
        run: |
          # Create TFLint configuration
          cat > .tflint.hcl << 'EOF'
          config {
            call_module_type = "all"
            force = false
            disabled_by_default = false
          }
          
          plugin "terraform" {
            enabled = true
            preset  = "recommended"
          }
          
          plugin "azurerm" {
            enabled = true
            version = "0.24.0"
            source  = "github.com/terraform-linters/tflint-ruleset-azurerm"
          }
          
          rule "terraform_required_version" {
            enabled = true
          }
          
          rule "terraform_required_providers" {
            enabled = true
          }
          
          rule "terraform_naming_convention" {
            enabled = true
            format  = "snake_case"
          }
          
          rule "terraform_typed_variables" {
            enabled = true
          }
          
          rule "terraform_unused_declarations" {
            enabled = true
          }
          
          rule "terraform_comment_syntax" {
            enabled = true
          }
          
          rule "terraform_documented_outputs" {
            enabled = true
          }
          
          rule "terraform_documented_variables" {
            enabled = true
          }
          EOF
      
      - name: 🔧 Initialize TFLint
        run: |
          tflint --init
      
      - name: 🔎 Run TFLint (All Layers)
        run: |
          echo "🔎 Running TFLint analysis on all layers..."
          
          # Track results
          TOTAL_ISSUES=0
          LAYER_RESULTS=()
          
          # Lint each layer
          for layer in layers/*/; do
            layer_name=$(basename "$layer")
            echo ""
            echo "🔎 Analyzing layer: $layer_name"
            
            cd "$layer"
            
            # Run TFLint and capture output
            if tflint_output=$(tflint --format=json 2>&1); then
              issues_count=$(echo "$tflint_output" | jq '.issues | length' 2>/dev/null || echo "0")
              TOTAL_ISSUES=$((TOTAL_ISSUES + issues_count))
              
              if [[ $issues_count -eq 0 ]]; then
                LAYER_RESULTS+=("✅ $layer_name: No issues")
              else
                LAYER_RESULTS+=("⚠️ $layer_name: $issues_count issues")
                echo "$tflint_output" | jq -r '.issues[] | "  - \(.rule.name): \(.message)"' || true
              fi
            else
              LAYER_RESULTS+=("❌ $layer_name: Analysis failed")
              echo "TFLint failed for $layer_name"
            fi
            
            cd - > /dev/null
          done
          
          # Create summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔎 TFLint Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Issues Found:** $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for result in "${LAYER_RESULTS[@]}"; do
            echo "- $result" >> $GITHUB_STEP_SUMMARY
          done
          
          # Fail if there are critical issues (optional - you can adjust this)
          if [[ $TOTAL_ISSUES -gt 50 ]]; then
            echo ""
            echo "❌ Too many issues found ($TOTAL_ISSUES). Please review and fix."
            exit 1
          fi

  #=============================================================================
  # Checkov Security Scanning
  #=============================================================================
  checkov:
    name: 🛡️ Security Scan (Checkov)
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 🛡️ Install Checkov
        run: |
          pip install checkov==${{ env.CHECKOV_VERSION }}
      
      - name: 🛡️ Run Security Scan
        run: |
          echo "🛡️ Running Checkov security analysis..."
          
          # Run Checkov with JSON output for processing
          checkov \
            --directory . \
            --framework terraform \
            --output json \
            --output cli \
            --soft-fail \
            --download-external-modules true \
            --output-file-path console,checkov-report.json
        continue-on-error: true
      
      - name: 📊 Process Security Results
        run: |
          if [[ -f checkov-report.json ]]; then
            # Parse results
            PASSED=$(jq '.results.passed_checks | length' checkov-report.json)
            FAILED=$(jq '.results.failed_checks | length' checkov-report.json)
            SKIPPED=$(jq '.results.skipped_checks | length' checkov-report.json)
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🛡️ Security Scan Results (Checkov)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **✅ Passed:** $PASSED checks" >> $GITHUB_STEP_SUMMARY
            echo "- **❌ Failed:** $FAILED checks" >> $GITHUB_STEP_SUMMARY
            echo "- **⏭️ Skipped:** $SKIPPED checks" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show critical failures
            if [[ $FAILED -gt 0 ]]; then
              echo "### Critical Security Issues" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Get high/critical severity issues
              jq -r '.results.failed_checks[] | select(.severity == "HIGH" or .severity == "CRITICAL") | "- **\(.check_id)**: \(.check_name) (\(.file_path))"' checkov-report.json | head -20 >> $GITHUB_STEP_SUMMARY
              
              if [[ $(jq '[.results.failed_checks[] | select(.severity == "HIGH" or .severity == "CRITICAL")] | length' checkov-report.json) -gt 10 ]]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "⚠️ **Warning:** High number of critical security issues detected!" >> $GITHUB_STEP_SUMMARY
                echo "Please review the full Checkov report for details." >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "❌ Checkov report not generated"
          fi
      
      - name: 📄 Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: checkov-security-report
          path: checkov-report.json
          retention-days: 30

  #=============================================================================
  # Documentation Validation
  #=============================================================================
  docs-validation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📚 Check Required Documentation
        run: |
          echo "📚 Checking documentation completeness..."
          
          MISSING_DOCS=()
          TOTAL_MODULES=0
          DOCUMENTED_MODULES=0
          
          # Check module documentation
          for module_dir in modules/*/; do
            if [[ -d "$module_dir" ]]; then
              module_name=$(basename "$module_dir")
              TOTAL_MODULES=$((TOTAL_MODULES + 1))
              
              if [[ -f "$module_dir/README.md" ]]; then
                DOCUMENTED_MODULES=$((DOCUMENTED_MODULES + 1))
              else
                MISSING_DOCS+=("Module: $module_name")
              fi
            fi
          done
          
          # Check layer documentation
          for layer_dir in layers/*/; do
            if [[ -d "$layer_dir" ]]; then
              layer_name=$(basename "$layer_dir")
              
              # Check if variables are documented
              if [[ -f "$layer_dir/variables.tf" ]] && ! grep -q "description.*=" "$layer_dir/variables.tf"; then
                MISSING_DOCS+=("Layer $layer_name: Undocumented variables")
              fi
              
              # Check if outputs are documented
              if [[ -f "$layer_dir/outputs.tf" ]] && ! grep -q "description.*=" "$layer_dir/outputs.tf"; then
                MISSING_DOCS+=("Layer $layer_name: Undocumented outputs")
              fi
            fi
          done
          
          # Create summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📚 Documentation Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Module Documentation:** $DOCUMENTED_MODULES/$TOTAL_MODULES modules documented" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ ${#MISSING_DOCS[@]} -gt 0 ]]; then
            echo "### Missing Documentation" >> $GITHUB_STEP_SUMMARY
            for missing in "${MISSING_DOCS[@]}"; do
              echo "- $missing" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "✅ All modules and layers are properly documented!" >> $GITHUB_STEP_SUMMARY
          fi

  #=============================================================================
  # Cost Estimation (Optional)
  #=============================================================================
  cost-estimation:
    name: 💰 Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 💰 Infracost Setup
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      
      - name: 💰 Generate Cost Estimate
        run: |
          echo "💰 Generating cost estimates for infrastructure changes..."
          
          # Generate cost breakdown (if API key is available)
          if [[ -n "${{ secrets.INFRACOST_API_KEY }}" ]]; then
            infracost breakdown --path=. --format=json --out-file=infracost-base.json || true
            
            if [[ -f infracost-base.json ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## 💰 Cost Analysis" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Infrastructure cost estimation is available." >> $GITHUB_STEP_SUMMARY
              echo "See the Infracost report for detailed breakdown." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 💰 Cost Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Cost estimation unavailable (API key not configured)" >> $GITHUB_STEP_SUMMARY
            echo "Configure INFRACOST_API_KEY secret to enable cost analysis." >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  #=============================================================================
  # Final Summary
  #=============================================================================
  quality-summary:
    name: 📋 Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [terraform-validate, tflint, checkov, docs-validation]
    if: always()
    
    steps:
      - name: 📋 Quality Gate Results
        run: |
          echo "## 🎯 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Validation | ${{ needs.terraform-validate.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TFLint Analysis | ${{ needs.tflint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.checkov.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.terraform-validate.result }}" == "success" && 
                "${{ needs.tflint.result }}" == "success" && 
                "${{ needs.checkov.result }}" == "success" && 
                "${{ needs.docs-validation.result }}" == "success" ]]; then
            echo "🎉 **All quality checks passed!** The code is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some quality checks failed.** Please review and fix the issues before deploying." >> $GITHUB_STEP_SUMMARY
          fi